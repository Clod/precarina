Para hacer los builds para los stores:

https://docs.google.com/document/d/1vF4wRXFvQNbXeBKm4ZsbYA4ApUR5CeHgpKqp_dlCpI0/edit?usp=sharing


Cambiar la versión en 

- help_drawer.dart
- pubspec.yaml

% flutter build ipa

Ojo que puede tirar errores por no estar logueado o por tener pendienta la aceptación de algo.

Y para Google se puede hacer desde línea de comando con:

% flutter build aab






Para construir los íconos:
% dart  run flutter_launcher_icons

Verificar en Xcode que:

Runner -> Build Setings -> Strip Style == Non-Global Symbols




% flutter build apk --split-per-abi

% flutter gen-l10n

% open ios/Runner.xcworkspace

% flutter build ipa --obfuscate --release --export-method=ad-hoc --split-debug-info=/Users/claudiograsso/Desktop

Matar Xcode desde la línea de comandos:

kill $(ps aux | grep 'Xcode' | awk '{print $2}')

flutter run --release  (para correrlo en un iPhone y poder desconectarlo)

flutter build apk --split-per-abi (y cmpartir el ARM64)

flutter build ipa --obfuscate --release --export-method=ad-hoc --split-debug-info=/Users/claudiograsso/Desktop

In Xcode, go to Target Runner > Build Settings > Strip Style
Change from All Symbols to Non-Global Symbols (Está en el apartado Deployment)
Se ve desde los dos Runners (el de arriba y el del iconito)
Si no hago eso, NO ME ANDA LA VERSIÓN AD-HOC


Primero hay que crear el proyecto en Firebase y bajar el archivo a:

/Users/claudiograsso/StudioProjects/tflite_bmi_duo/ios/Runner/GoogleService-Info.plist

iPhones:
Barbara Wagmaister: barbarawag@gmail.com
Mariana Cazalas: marianacazalas@gmail.com
Marina Vaccari: marinvaccari@gmail.com
Carolina Gvirtzman: polisomnoguti@gmail.com

OJO: después de agregarlos al proyecto en Firebase hay que agregarlos al release!!!
Si no, las invitaciones no salen.


Editor HTML online:
https://onlinehtmleditor.dev/
https://htmlg.com/html-editor/

Link al congreso:

https://www.wcpccs2023.org/event/1da8563e-0f65-486c-88df-70c3db431af5/summary

Link a los participantes del Congreso:
https://www.wcpccs2023.org/event/1da8563e-0f65-486c-88df-70c3db431af5/websitePage:f3433ae0-cdc1-47f9-bfa9-9fdc490f09d9

claudiograsso@192 Downloads % ./sqlite3 blood_pressure.db
create table percentiles(id INTEGER PRIMARY KEY, sex TEXT, age INTEGER, height REAL, systolic INTEGER, diastolic INTEGER, percentile TEXT);


Con sexo y edad busco la altura inmediátamente superior

select * from heights where age = age and sex = sex and height <= height

si me da vacío me aseguro que la altura sea mayor que la máxima para esa edad y sexo

Con edad, sexo y altura estándar busco el registro cuya PAS sea >= que la del paciente.
Como puede haber varias, me quedo con la menor y esa me determina el percentil y, por ende, el
diagnóstico para PAS

Repetir para PAD

Tomar el peor caso.



----------------------------------



**[Flutter Refactor Instructions – Improving Consistency, DRY, and Robustness]**


**1. Replace Verbose Radio Button Groups with a Reusable Widget**
- Identify any sets of repeated `RadioListTile` widgets that represent a single-choice selection.
- Replace these blocks with a reusable method or widget function (like the `_buildRadioGroup` shown previously), using `ToggleButtons` for better customization and reduced code duplication.
- Pass the list of option labels, current selected index, and the onChanged handler as parameters to this method or widget.

**2. Extract Numeric Input Fields into a Modular Builder**
- Find all places where input fields (numeric entry, e.g., for minutes, blocks, etc.) are defined, especially where similar styling and logic is used repeatedly.
- Refactor these into a single method (e.g., `_buildNumericInput`), passing in necessary configuration like key, controller, validator, etc.
- Replace direct widget tree blocks with calls to this new method.

**3. Improve Null Safety and Defensive Programming**
- Use nullable-aware operators (`??`, `int?`, `double?`, etc.) everywhere user or model input may be null.
- Explicitly check for null in value-change handlers to prevent runtime exceptions.
- Do not use null assertion (`!`) unless absolutely certain a value cannot be null at runtime.

**4. Strengthen State and Controller Management**
- Ensure all `TextEditingController` instances are disposed in the `dispose()` method of `State` classes.
- Remove any unused controller declarations.
- Add `@override void dispose()` if missing.

**5. Reduce Redundant Updates**
- Update state only when values actually change. In all selection/onChanged callbacks, check if the new value differs from the current before calling `setState`.

**6. Generalize Event Handler Parameters**
- Explicitly type callback parameters (e.g., `int? value`) and add necessary null guards before using them.

**7. Centralize Styling and Logic**
- Move all shared container decoration, border, and input style configurations into the reusable widgets/methods.
- Ensure changes to options, layout, or theming can be applied in one place with minimal changes needed elsewhere.

**8. Test Functionality**
- After every refactor, run the app and verify all forms still work as expected, especially user interactions and validation.

***

**Example Output Before and After Refactor:**

_Before (Radio Selection):_
```dart
RadioListTile(
  title: Text("Option 1"),
  value: 0,
  groupValue: selected,
  onChanged: (value) => setState(() => selected = value),
)
// ... (repeated multiple times)
```

_After:_
```dart
_buildRadioGroup(
  groupValue: selected,
  onChanged: (value) => setState(() => selected = value),
  options: ["Option 1", "Option 2", "Option 3"]
)
```

***


When in doubt, refactor inline logic into parameterized methods—aim for DRY, maintainable, robust Flutter code.